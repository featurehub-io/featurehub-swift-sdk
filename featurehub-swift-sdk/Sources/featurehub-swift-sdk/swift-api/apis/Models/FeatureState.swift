//
// FeatureState.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct FeatureState: Codable, JSONEncodable, Hashable {

    public var id: UUID
    public var key: String
    /** Is this feature locked. Usually this doesn't matter because the value is the value, but for FeatureInterceptors it can matter. */
    public var l: Bool?
    /** The version of the feature, this allows features to change values and it means we don't trigger events */
    public var version: Int64?
    public var type: FeatureValueType?
    /** the current value */
    public var value: AnyCodable?
    /** This field is filled in from the client side in the GET api as the GET api is able to request multiple environments. It is never passed from the server, as an array of feature states is wrapped in an environment. */
    public var environmentId: UUID?
    public var strategies: [FeatureRolloutStrategy]?

    public init(id: UUID, key: String, l: Bool? = nil, version: Int64? = nil, type: FeatureValueType? = nil, value: AnyCodable? = nil, environmentId: UUID? = nil, strategies: [FeatureRolloutStrategy]? = nil) {
        self.id = id
        self.key = key
        self.l = l
        self.version = version
        self.type = type
        self.value = value
        self.environmentId = environmentId
        self.strategies = strategies
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case key
        case l
        case version
        case type
        case value
        case environmentId
        case strategies
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(key, forKey: .key)
        try container.encodeIfPresent(l, forKey: .l)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(environmentId, forKey: .environmentId)
        try container.encodeIfPresent(strategies, forKey: .strategies)
    }
}

