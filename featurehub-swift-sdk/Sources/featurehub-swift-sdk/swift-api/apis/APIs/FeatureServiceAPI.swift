//
// FeatureServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class FeatureServiceAPI {

    /**

     - parameter apiKey: (query) A list of API keys to retrieve information about
     - parameter contextSha: (query) A SHA of the context in string form designed to break any cache if the client changes context. It is not used by the server in any way, but if Fastly support is turned on it must be present. (optional)
     - returns: [FeatureEnvironmentCollection]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getFeatureStates(apiKey: [String], contextSha: String? = nil) async throws -> [FeatureEnvironmentCollection] {
        return try await getFeatureStatesWithRequestBuilder(apiKey: apiKey, contextSha: contextSha).execute().body
    }

    /**
     - GET /features/
     - Requests all features for this sdkurl and disconnects
     - responseHeaders: [x-fh-version(String)]
     - parameter apiKey: (query) A list of API keys to retrieve information about
     - parameter contextSha: (query) A SHA of the context in string form designed to break any cache if the client changes context. It is not used by the server in any way, but if Fastly support is turned on it must be present. (optional)
     - returns: RequestBuilder<[FeatureEnvironmentCollection]>
     */
    open class func getFeatureStatesWithRequestBuilder(apiKey: [String], contextSha: String? = nil) -> RequestBuilder<[FeatureEnvironmentCollection]> {
        let localVariablePath = "/features/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "apiKey": (wrappedValue: apiKey.encodeToJSON(), isExplode: true),
            "contextSha": (wrappedValue: contextSha?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[FeatureEnvironmentCollection]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
          parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter sdkUrl: (path) The API Key for the environment and service account
     - parameter featureKey: (path) The key you wish to update/action
     - parameter featureStateUpdate: (body)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func setFeatureState(sdkUrl: String, featureKey: String, featureStateUpdate: FeatureStateUpdate) async throws {
        return try await setFeatureStateWithRequestBuilder(sdkUrl: sdkUrl, featureKey: featureKey, featureStateUpdate: featureStateUpdate).execute().body
    }

    /**
     - PUT /features/{sdkUrl}/{featureKey}
     - Updates the feature state if allowed.
     - responseHeaders: [x-fh-version(String)]
     - parameter sdkUrl: (path) The API Key for the environment and service account
     - parameter featureKey: (path) The key you wish to update/action
     - parameter featureStateUpdate: (body)
     - returns: RequestBuilder<Void>
     */
    open class func setFeatureStateWithRequestBuilder(sdkUrl: String, featureKey: String, featureStateUpdate: FeatureStateUpdate) -> RequestBuilder<Void> {
        var localVariablePath = "/features/{sdkUrl}/{featureKey}"
        let sdkUrlPreEscape = "\(APIHelper.mapValueToPathItem(sdkUrl))"
        let sdkUrlPostEscape = sdkUrlPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sdkUrl}", with: sdkUrlPostEscape, options: .literal, range: nil)
        let featureKeyPreEscape = "\(APIHelper.mapValueToPathItem(featureKey))"
        let featureKeyPostEscape = featureKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{featureKey}", with: featureKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: featureStateUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
